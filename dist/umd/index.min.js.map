{"version":3,"file":"index.min.js","sources":["../../src/SimplePromiseQueue.ts","../../src/utils.ts","../../src/index.ts"],"sourcesContent":["// tslint:disable: variable-name\nexport default class SimplePromiseQueue {\n  private readonly _queue: Array<Promise<void>> = []\n  private _flushing = false\n\n  public enqueue(promise: Promise<void>) {\n    this._queue.push(promise)\n    if (!this._flushing) { return this.flushQueue() }\n    return Promise.resolve()\n  }\n\n  private flushQueue() {\n    this._flushing = true\n\n    const chain = (): Promise<void> | void => {\n      const nextTask = this._queue.shift()\n      if (nextTask) {\n        return nextTask.then(chain)\n      } else {\n        this._flushing = false\n      }\n    }\n    return Promise.resolve(chain())\n  }\n}\n","import deepmerge from 'deepmerge'\n\nexport type MergeOptionType = 'replaceArrays' | 'concatArrays'\n\nconst options: {[k in MergeOptionType]: deepmerge.Options} = {\n  replaceArrays: {\n    arrayMerge: (destinationArray, sourceArray, options) => sourceArray\n  },\n  concatArrays: {\n    arrayMerge: (target, source, options) => target.concat(...source)\n  }\n}\n\nconst defaultMergeOptions: deepmerge.Options = {\n  // replacing arrays\n  \n}\n\nexport function merge<I, F>(into: Partial<I>, from: Partial<F>, mergeOption: MergeOptionType): I & F & {} {\n  return deepmerge(into, from, options[mergeOption])\n}\n","/**\n * Created by championswimmer on 18/07/17.\n */\nimport { Mutation, MutationPayload, Plugin, Store } from 'vuex'\nimport { AsyncStorage } from './AsyncStorage'\nimport { MockStorage } from './MockStorage'\nimport { PersistOptions } from './PersistOptions'\nimport SimplePromiseQueue from './SimplePromiseQueue'\nimport { merge, MergeOptionType } from './utils'\nimport {parse, stringify} from 'flatted'\n\nlet FlattedJSON = JSON\n\n/**\n * A class that implements the vuex persistence.\n * @type S type of the 'state' inside the store (default: any)\n */\nexport class VuexPersistence<S> implements PersistOptions<S> {\n  public asyncStorage: boolean\n  public storage: Storage | AsyncStorage | undefined\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\n  public reducer: (state: S) => Partial<S>\n  public key: string\n  public filter: (mutation: MutationPayload) => boolean\n  public modules: string[]\n  public strictMode: boolean\n  public supportCircular: boolean\n  public mergeOption: MergeOptionType\n\n  /**\n   * The plugin function that can be used inside a vuex store.\n   */\n  public plugin: Plugin<S>\n  /**\n   * A mutation that can be used to restore state\n   * Helpful if we are running in strict mode\n   */\n  public RESTORE_MUTATION: Mutation<S>\n  public subscribed: boolean\n\n  // tslint:disable-next-line:variable-name\n  private _mutex = new SimplePromiseQueue()\n\n  /**\n   * Create a {@link VuexPersistence} object.\n   * Use the <code>plugin</code> function of this class as a\n   * Vuex plugin.\n   * @param {PersistOptions} options\n   */\n  public constructor(options?: PersistOptions<S>) {\n    if (typeof options === 'undefined') options = {} as PersistOptions<S>\n    this.key = ((options.key != null) ? options.key : 'vuex')\n\n    this.subscribed = false\n    this.supportCircular = options.supportCircular || false\n    if (this.supportCircular) {\n      // FlattedJSON = require('flatted')\n    }\n    this.mergeOption = options.mergeOption || 'replaceArrays'\n\n    let localStorageLitmus = true\n\n    try {\n      window.localStorage.getItem('')\n    } catch (err) {\n      localStorageLitmus = false\n    }\n\n    /**\n     * 1. First, prefer storage sent in optinos\n     * 2. Otherwise, use window.localStorage if available\n     * 3. Finally, try to use MockStorage\n     * 4. None of above? Well we gotta fail.\n     */\n    if (options.storage) { this.storage = options.storage }\n    else if (localStorageLitmus) { this.storage = window.localStorage }\n    else if (MockStorage) { this.storage = new MockStorage() }\n    else { throw new Error(\"Neither 'window' is defined, nor 'MockStorage' is available\") }\n\n    /**\n     * How this works is -\n     *  1. If there is options.reducer function, we use that, if not;\n     *  2. We check options.modules;\n     *    1. If there is no options.modules array, we use entire state in reducer\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\n     *        defined in the options.modules[] array\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\n     */\n    this.reducer = (\n      (options.reducer != null)\n        ? options.reducer\n        : (\n          (options.modules == null)\n            ? ((state: S) => state)\n            : (\n              (state: any) =>\n                (options!.modules as string[]).reduce((a, i) =>\n                  merge(a, { [i]: state[i] }, this.mergeOption), {/* start empty accumulator*/ })\n            )\n        )\n    )\n\n    this.filter = options.filter || ((mutation) => true)\n\n    this.strictMode = options.strictMode || false\n\n    const _this = this\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\n      const mergedState = merge(state, savedState || {}, _this.mergeOption)\n      for (const propertyName of Object.keys(mergedState as {})) {\n        // Maintain support for vue 2\n        if ((this as any)._vm !== undefined && (this as any)._vm.$set !== undefined) {\n          (this as any)._vm.$set(state, propertyName, (mergedState as any)[propertyName])\n          continue\n        }\n\n        (state as any)[propertyName] = (mergedState as any)[propertyName]\n      }\n    }\n\n    this.asyncStorage = options.asyncStorage || false\n\n    if (this.asyncStorage) {\n\n      /**\n       * Async {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: AsyncStorage) =>\n            (storage).getItem(key)\n              .then((value) =>\n                typeof value === 'string' // If string, parse, or else, just return\n                  ? (\n                    this.supportCircular\n                      ? parse(value || '{}')\n                      : JSON.parse(value || '{}')\n                  )\n                  : (value || {})\n              )\n          )\n      )\n\n      /**\n       * Async {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: AsyncStorage) =>\n            (storage).setItem(\n              key, // Second argument is state _object_ if asyc storage, stringified otherwise\n              // do not stringify the state if the storage type is async\n              (this.asyncStorage\n                ? merge({}, state || {}, this.mergeOption)\n                : (\n                  this.supportCircular\n                    ? stringify(state) as any\n                    : JSON.stringify(state) as any\n                )\n              )\n            )\n          )\n      )\n\n      /**\n       * Async version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        /**\n         * For async stores, we're capturing the Promise returned\n         * by the `restoreState()` function in a `restored` property\n         * on the store itself. This would allow app developers to\n         * determine when and if the store's state has indeed been\n         * refreshed. This approach was suggested by GitHub user @hotdogee.\n         * See https://github.com/championswimmer/vuex-persist/pull/118#issuecomment-500914963\n         * @since 2.1.0\n         */\n        (store as any).restored = ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\n          /**\n           * If in strict mode, do only via mutation\n           */\n          if (this.strictMode) {\n            store.commit('RESTORE_MUTATION', savedState)\n          } else {\n            store.replaceState(merge(store.state, savedState || {}, this.mergeOption) as S)\n          }\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\n            if (this.filter(mutation)) {\n              this._mutex.enqueue(\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\n              )\n            }\n          })\n          this.subscribed = true\n        })\n      }\n    } else {\n\n      /**\n       * Sync {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: Storage) => {\n            const value = (storage).getItem(key)\n            if (typeof value === 'string') {// If string, parse, or else, just return\n              return (\n                this.supportCircular\n                  ? parse(value || '{}')\n                  : JSON.parse(value || '{}')\n              )\n            } else {\n              return (value || {})\n            }\n          })\n      )\n\n      /**\n       * Sync {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: Storage) =>\n            (storage).setItem(\n              key, // Second argument is state _object_ if localforage, stringified otherwise\n              (\n                this.supportCircular\n                  ? stringify(state) as any\n                  : JSON.stringify(state) as any\n              )\n            )\n          )\n      )\n\n      /**\n       * Sync version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        const savedState = this.restoreState(this.key, this.storage) as S\n\n        if (this.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState)\n        } else {\n          store.replaceState(merge(store.state, savedState || {}, this.mergeOption) as S)\n        }\n\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\n          if (this.filter(mutation)) {\n            this.saveState(this.key, this.reducer(state), this.storage)\n          }\n        })\n\n        this.subscribed = true\n      }\n    }\n  }\n\n  /**\n   * Creates a subscriber on the store. automatically is used\n   * when this is used a vuex plugin. Not for manual usage.\n   * @param store\n   */\n  private subscriber = (store: Store<S>) =>\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\n}\n\nexport {\n  MockStorage, AsyncStorage, PersistOptions\n}\n\nexport default VuexPersistence\n"],"names":["SimplePromiseQueue","promise","this","_queue","push","_flushing","Promise","resolve","flushQueue","chain","nextTask","_this","shift","then","options","replaceArrays","arrayMerge","destinationArray","sourceArray","concatArrays","target","source","concat","merge","into","from","mergeOption","deepmerge","store","handler","subscribe","key","subscribed","supportCircular","localStorageLitmus","window","localStorage","getItem","err","storage","MockStorage","Error","reducer","modules","state","reduce","a","i","_this_1","filter","mutation","strictMode","RESTORE_MUTATION","savedState","mergedState","_a","Object","keys","_i","propertyName","undefined","_vm","$set","asyncStorage","restoreState","value","parse","JSON","saveState","setItem","stringify","plugin","restored","commit","replaceState","subscriber","_mutex","enqueue"],"mappings":"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"}